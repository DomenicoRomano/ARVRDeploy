(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _arjsConfig = require('./components/arjs-config');

var _arjsConfig2 = _interopRequireDefault(_arjsConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// const roomplan = new Roomplan();
var arjsConfig = new _arjsConfig2.default(); // import Roomplan from './components/roomplan';

},{"./components/arjs-config":2}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ARJSConfig = function () {
  function ARJSConfig() {
    _classCallCheck(this, ARJSConfig);

    this.windowWidth = window.innerWidth;
    this.windowHeight = window.innerHeight;

    window.setTimeout(this.configure.bind(this), 2000);
  }

  _createClass(ARJSConfig, [{
    key: 'configure',
    value: function configure() {
      var _this = this;

      window.dispatchEvent(new Event('resize'));
      document.querySelector('.a-enter-vr').style.display = 'none';
      document.querySelector('a-scene').onclick = function () {
        window.dispatchEvent(new Event('resize'));
      };
      window.addEventListener('resize', function () {
        _this.setResizeTimeout(_this.windowWidth, _this.windowHeight);
      });
    }
  }, {
    key: 'setResizeTimeout',
    value: function setResizeTimeout(oldWidth, oldHeight) {
      if (oldWidth === window.innerWidth && oldHeight === window.innerHeight) return;
      this.windowWidth = window.innerWidth;
      this.windowHeight = window.innerHeight;
      window.setTimeout(function () {
        window.dispatchEvent(new Event('resize'));
      }, 700);
    }
  }]);

  return ARJSConfig;
}();

exports.default = ARJSConfig;

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
